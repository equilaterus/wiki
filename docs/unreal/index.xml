<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Unreal on</title><link>https://equilaterus.com/wiki/docs/unreal/</link><description>Recent content in Unreal on</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Tue, 06 Oct 2020 08:48:45 +0000</lastBuildDate><atom:link href="https://equilaterus.com/wiki/docs/unreal/index.xml" rel="self" type="application/rss+xml"/><item><title>UE Linux</title><link>https://equilaterus.com/wiki/docs/unreal/ue-linux/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>https://equilaterus.com/wiki/docs/unreal/ue-linux/</guid><description>ðŸ’¡ You can change the commands in the scripts section of `./package.json`. create #
Create new content for your site:
npm run create [path] [flags] See also the Hugo docs: hugo new.
Docs based tree #
Create a docs based tree â€” with a single command:
npm run create -- --kind docs [section] For example, create a docs based tree named guides:
npm run create -- --kind docs guides lint #
Check scripts, styles, and markdown for errors:</description></item><item><title>UE Content creation</title><link>https://equilaterus.com/wiki/docs/unreal/ue-content-creation/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>https://equilaterus.com/wiki/docs/unreal/ue-content-creation/</guid><description>Static Meshes #
Naming: #
Create meshes using CamelCase. Export the whole object as SM_CamelCaseName. Name textures T_CamelCaseName_SUFFIX, replacing SUFFIX with: _D: Diffuse/Color Map _N: Normal Map _E: Emissive Map _M: Mask Map _R: Roughness Map _MT: Metallic Map _S: Specular _DP: Displacement _AO: Ambient Occlusion _H: Height Map _F: Flow Map More info: Naming Convention Complete list: Here Collisions: #
Add a custom convex mesh with the name UCX_MeshName, where MeshName is the exact name of the mesh that will have a collision.</description></item><item><title>UE Programming</title><link>https://equilaterus.com/wiki/docs/unreal/ue-programming/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>https://equilaterus.com/wiki/docs/unreal/ue-programming/</guid><description>UE and Git-LFS #
We have a project setup right here on GitHub.
UE C++ #
Crash course: Converting Blueprints to C++. Documentation: Gameplay Architecture.
UPROPERTY UFUNCTION BLUEPRINT PURE / CALLABLE BLUEPRINT IMPLEMENTABLE EVENT BLUEPRINT NATIVE EVENT DELEGATES Common includes #
Class #include UWorld Engine/World.h AActor GameFramework/Actor.h UActorComponent Components/ActorComponent.h USceneComponent Components/SceneComponent.h UGameplayStatics Engine/World.h UKismetSystemLibrary Kismet/GameplayStatics.h UKismetMathLibrary* Kismet/KismetMathLibrary.h FMath Math/UnrealMathUtility.h UPhysicsHandleComponent PhysicsEngine/PhysicsHandleComponent.h (*) KismetMath is usually a wrapper to FMath. Mapping types #
Blueprint C++ String FString Name FName Vector FVector Rotator FRotator Transform FTransform Object UObject* Actor AActor* ActorComponent UActorComponent* Float float - double Integer int32 - uint32 Integer64 int64 - uint64 Bool bool Properties Visibility #
Blueprint: BlueprintReadonly BlueprintReadWrite Defaults and instance: VisibleAnywhere EditAnywhere Only defaults: VisibleDefaultsOnly EditDefaultsOnly Only instance: VisibleInstanceOnly EditInstanceOnly Tips #
You can create C++ files either manually or using the UE editor, first case requires to regenerate project files (left click on .</description></item></channel></rss>