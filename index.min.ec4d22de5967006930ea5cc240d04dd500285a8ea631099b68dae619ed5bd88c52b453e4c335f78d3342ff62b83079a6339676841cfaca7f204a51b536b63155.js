var suggestions=document.getElementById("suggestions"),search=document.getElementById("search");search!==null&&document.addEventListener("keydown",inputFocus);function inputFocus(e){e.ctrlKey&&e.key==="/"&&(e.preventDefault(),search.focus()),e.key==="Escape"&&(search.blur(),suggestions.classList.add("d-none"))}document.addEventListener("click",function(e){var t=suggestions.contains(e.target);t||suggestions.classList.add("d-none")}),document.addEventListener("keydown",suggestionFocus);function suggestionFocus(e){const s=suggestions.classList.contains("d-none");if(s)return;const t=[...suggestions.querySelectorAll("a")];if(t.length===0)return;const n=t.indexOf(document.activeElement);if(e.key==="ArrowUp"){e.preventDefault();const s=n>0?n-1:0;t[s].focus()}else if(e.key==="ArrowDown"){e.preventDefault();const s=n+1<t.length?n+1:n;t[s].focus()}}(function(){var e=new FlexSearch.Document({tokenize:"forward",cache:100,document:{id:"id",store:["href","title","description"],index:["title","description","content"]}});e.add({id:0,href:"/wiki/docs/start/",title:"Start",description:"Equilaterus WIKI starts here",content:""}),e.add({id:1,href:"/wiki/docs/unreal/ue-linux/",title:"UE Linux",description:"Unreal Development on Linux",content:` Official binaries: Download page Recommended IDE: Rider Linux. Recommended Git App: Github Desktop for Linux. PlasticSCM: Linux packages Instructions #Extract Unreal Engine on any location, for example:
\$HOME/Unreal/VERSION/ Go inside the extracted folder Engine/Binaries/Linux and execute file: UnrealEditor.
Open or create a project. After that, you can open it with Rider (or your IDE) and compile it as usual.
Recommended config #Build max parallel actions: See UE Programming section
If you\u0026rsquo;re using PlasticSCM: Equilaterus PlasticSCM+GitHub
Compile your own binaries #To compile and generate your own binaries:
Prepare your GitHub account to see the repo: [https://www.unrealengine.com/en-US/ue-on-github]
Clone or download from: https://github.com/EpicGames/UnrealEngine.
Setup.
./Setup.sh Generate files (but do not make).
./GenerateProjectFiles.sh Go to Engine/Build/BatchFiles/
/RunUAT.sh BuildGraph -target=\u0026quot;Make Installed Build Linux\u0026quot; -script=Engine/Build/InstalledEngineBuild.xml -clean -set:HostPlatformOnly=true -set:WithDDC=false -set:GameConfigurations=\u0026quot;Development;Shipping\u0026quot; If there are errors with dependencies: Copy Engine/Binaries/DotNET (from source folders) to your compiled LocalBuilds/Engine/Linux/Engine/Binaries/DotNET ( folder). Rerun previous command.
Copy results from LocalBuilds/Engine/Linux folder to any other location.
Create or open a project with {OtherLocation}/Engine/Binaries/Linux/UnrealEditor. After opening it, you can use Rider or your IDE to modify it.
Common errors:
Dependencies errors: Blog birost post Unreal forum thread Other options:
Unreal containers installed build See Unreal Slackers on discord. `}),e.add({id:2,href:"/wiki/docs/programming/",title:"Programming",description:"Programming",content:""}),e.add({id:3,href:"/wiki/docs/unreal/",title:"Unreal",description:"Unreal",content:""}),e.add({id:4,href:"/wiki/docs/start/introduction/",title:"Introduction",description:"Welcome to our free and open-source Wiki. Here we share information regarding our workflows to create videogames and programming in general.",content:`Principles #Free and open-source.
Multiplatform workflows but Linux centric.
`}),e.add({id:5,href:"/wiki/docs/unreal/ue-content-creation/",title:"UE Content creation",description:"Unreal Engine content creation guidelines.",content:`Static Meshes #Naming: #Create meshes using CamelCase. Export the whole object as SM_CamelCaseName. Name textures T_CamelCaseName_SUFFIX, replacing SUFFIX with: _D: Diffuse/Color Map _N: Normal Map _E: Emissive Map _M: Mask Map _R: Roughness Map _MT: Metallic Map _S: Specular _DP: Displacement _AO: Ambient Occlusion _H: Height Map _F: Flow Map More info: Naming Convention Complete list: Here Collisions: #Add a custom convex mesh with the name UCX_MeshName, where MeshName is the exact name of the mesh that will have a collision. More info and advanced scenarios: Static Meshes Pipeline Importing: #Check Import Normals and Tangents for a properly display of Smooth Shaded Objects. UE4 will automatically show a warning when this setting is required but wasn\u0026rsquo;t selected or when the FBX was generated without the Tangent Space.
Textures #Resizing/Converting TGA to PNG #Use this CLI tool: tga2png Open the TGA file, if it looks completely transparent, add a 1 as a final parameter otherwise do not use it. Example: targa2png.exe transparent.tga transparent.png 1 targa2png.exe normal.tga normal.png Use Picsor to compress the file(s). `}),e.add({id:6,href:"/wiki/docs/unreal/ue-programming/",title:"UE Programming",description:"Unreal Engine programming C++ and Blueprints.",content:`Source control #Working with big assets can be challenging, here are some options:
Git Plugin. GitHub LFS is not free. PlasticSCM. Includes free plan. Helix Perforce. Build max parallel actions #Modify or create:
Linux: \$HOME/.config/Unreal Engine/UnrealBuildTool/BuildConfiguration.xml Windows: mydocuments\\Unreal Engine\\UnrealBuildTool\\BuildConfiguration.xml BuildConfiguration.xml contents:
\u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;utf-8\u0026quot; ?\u0026gt; \u0026lt;Configuration xmlns=\u0026quot;https://www.unrealengine.com/BuildConfiguration\u0026quot;\u0026gt; \u0026lt;BuildConfiguration\u0026gt; \u0026lt;ProcessorCountMultiplier\u0026gt;2\u0026lt;/ProcessorCountMultiplier\u0026gt; \u0026lt;MaxProcessorCount\u0026gt;30\u0026lt;/MaxProcessorCount\u0026gt; \u0026lt;/BuildConfiguration\u0026gt; \u0026lt;/Configuration\u0026gt; In the previous example, by setting ProcessorCountMultiplier to 2, results in the compiler using all 32 hardware threads of the 16 physical core Threadripper 1950X processor. Then, setting MaxProcessorCount to 30 to limit compile thread count to 30, leaves 2 logical cores entirely free for other software, resulting in a smooth experience when multitasking during project compilation.
If your settings have been configured properly, you will get the following UE4 build process output:
Building XXX actions with 30 processes... More info: https://gpuopen.com/learn/threadripper-for-gamedev-ue4/
Unreal Plugins #Sample project Crash course UE Audio #Reverb #To activate the reverb, add the following line to your project /Config/DefaultEngine.ini:
[Audio] UseAudioMixer=true Create a Sound \u0026gt; Sound Attenuation asset and configure it on your Cue as the attenuation preset. Add an Audio Volume to your level, set it big enough to cover your playable area and set the following properties:
Settings -\u0026gt; Apply Reverb: True.
Settings -\u0026gt; Reverb effect: select one from the dropdown.
For more info check this video Reverb Tutorial. Note that if you added the configuration to your project .ini, you won\u0026rsquo;t need to execute additional commands on the UE console.
UE Animation #Documentation: Animation
Basics Course UE Livestream Animation Blueprints Locomotion Blendspaces Anim montages Caching poses Layering Modifying bones Look at Other contents: Subanim Anim offset Physical anims Paragon How to\u0026rsquo;s UE AI #Official docs
To enable the debugger set a key binding in Project Settings \u0026gt; Engine - Gameplay Debbuger \u0026gt; Activation Key. If you\u0026rsquo;re using a non default US keyboard or a keyboard with international bindings, it is recommended to set a plain key as Asterisk (*) or Minus (-), instead of something like an Apostrophe (\u0026rsquo;) that won\u0026rsquo;t be triggered by a single key-press on a US-International setup. Navmeshes #RecastNavMesh: update some navmesh settings on the scene. Also update-able from the project settings window searching for the option Agent (you can add support for multiple types of agents from here).
Navmesh modifier volume: Adds additional information to the navmesh. Exmample: high cost areas, not allowed areas, etc.
To disable Auto-updates: Editor Preferences -\u0026gt; Level Editor -\u0026gt; Misc -\u0026gt; Update Navigation Automatically.
More info: Official docs
AI Perception #Official docs
Add component AIPerception.
UE AI Perception with C++
Behavior trees #Official docs
Quick Start Guide
Nodes: Official reference
Composite Nodes: These are the nodes that define the root of a branch and the base rules for how that branch is executed. Task Nodes: These are the leaves of the Behavior Tree, these nodes are the actionable things to do and don\u0026rsquo;t have an output connection. Decorator Nodes: Also known as conditionals. These attach to another node and make decisions on whether or not a branch in the tree, or even a single node, can be executed. Service Nodes: These attach to Composite nodes, and will execute at their defined frequency as long as their branch is being executed. These are often used to make checks and to update the Blackboard. These take the place of traditional Parallel nodes in other Behavior Tree systems. Environment Query System (EQS) #Official Docs
UE AI movement C++ #See this tutorial: https://www.vikram.codes/blog/ai/01-basic-navigation Improved and updated code to seek for a Random Reachable Location in the Navmesh:
MovementAIController.h MovementAIController.cpp Don\u0026rsquo;t forget to add the NavigationSystem and AIModule modules in your {project}.Build.cs. More info: it would be suffice to add \u0026ldquo;NavigationSystem\u0026rdquo; and \u0026ldquo;AIModule\u0026rdquo; strings to the PublicDependencyModuleNames.AddRange(\u0026hellip;) parameters. How to do it? #Convert Mouse Location to World Space: Interact with 3D objects using players\u0026rsquo; mouse. See video Reducing Packaged Game Size: See here More about Unreal C++: See UE C++ section `}),e.add({id:7,href:"/wiki/docs/linux/unreal-linux/",title:"Unreal Linux",description:"Doks comes with commands for common tasks.",content:`💡 You can change the commands in the scripts section of \`./package.json\`. create #Create new content for your site:
npm run create [path] [flags] See also the Hugo docs: hugo new.
Docs based tree #Create a docs based tree — with a single command:
npm run create -- --kind docs [section] For example, create a docs based tree named guides:
npm run create -- --kind docs guides lint #Check scripts, styles, and markdown for errors:
npm run lint scripts #Check scripts for errors:
npm run lint:scripts [-- --fix] styles #Check styles for errors:
npm run lint:styles [-- --fix] markdown #Check markdown for errors:
npm run lint:markdown [-- --fix] clean #Delete temporary directories:
npm run clean start #Start local development server:
npm run start build #Build production website:
npm run build functions #Build Lambda functions:
npm run build:functions preview #Build production website including draft and future content:
npm run build:preview `}),e.add({id:8,href:"/wiki/docs/unreal/ue-cpp/",title:"UE C++",description:"Unreal Engine programming C++",content:`General information #Crash course: Converting Blueprints to C++. Documentation: Gameplay Architecture.
UPROPERTY UFUNCTION BLUEPRINT PURE / CALLABLE BLUEPRINT IMPLEMENTABLE EVENT BLUEPRINT NATIVE EVENT DELEGATES Common includes #Class #include UWorld Engine/World.h AActor GameFramework/Actor.h UActorComponent Components/ActorComponent.h USceneComponent Components/SceneComponent.h UGameplayStatics Engine/World.h UKismetSystemLibrary Kismet/GameplayStatics.h UKismetMathLibrary* Kismet/KismetMathLibrary.h FMath Math/UnrealMathUtility.h UPhysicsHandleComponent PhysicsEngine/PhysicsHandleComponent.h (*) KismetMath is usually a wrapper to FMath. Mapping types #Blueprint C++ String FString Name FName Vector FVector Rotator FRotator Transform FTransform Object UObject* Actor AActor* ActorComponent UActorComponent* Float float - double Integer int32 - uint32 Integer64 int64 - uint64 Bool bool Properties Visibility #Blueprint: BlueprintReadonly BlueprintReadWrite Defaults and instance: VisibleAnywhere EditAnywhere Only defaults: VisibleDefaultsOnly EditDefaultsOnly Only instance: VisibleInstanceOnly EditInstanceOnly Tips #You can create C++ files either manually or using the UE editor, first case requires to regenerate project files (left click on .uproject Generate Visual Studio Project Files).
After syncing files with Git, it\u0026rsquo;s a good idea to regenerate project files.
If Hot reloading doesn\u0026rsquo;t seem to take your changes, close editor and Rebuild project.
How to found BP nodes? Put your mouse over the node, see target and try to lookup for the file and lastly search for some keyword on the function name. For example:
Useful tools #Recommended IDE: Rider for UE. Recommended Git App: Github Desktop. PlasticSCM. Examples #Struct template #Sample UE C++ Struct (note F prefix):
// MyStruct.h #pragma once #include \u0026quot;MyStruct.generated.h\u0026quot; USTRUCT(BlueprintType) struct FMyStruct { GENERATED_BODY() UPROPERTY(BlueprintReadOnly) AActor* Character; FMyStruct(); }; // MyStruct.cpp FMyStruct::FMyStruct() { Character = nullptr; } Enum template #Sample UE C++ enum.
#pragma once #include \u0026quot;Enums.generated.h\u0026quot; UENUM(BlueprintType) enum class EDirection : uint8 { Left UMETA(DisplayName = \u0026quot;Left\u0026quot;), Right UMETA(DisplayName = \u0026quot;Right\u0026quot;), Front UMETA(DisplayName = \u0026quot;Front\u0026quot;), Back UMETA(DisplayName = \u0026quot;Back\u0026quot;) }; // You can add more enums here... Interfaces #Sample interface:
#pragma once #include \u0026quot;CoreMinimal.h\u0026quot; #include \u0026quot;UObject/Interface.h\u0026quot; #include \u0026quot;MyInterface.generated.h\u0026quot; // This class does not need to be modified. UINTERFACE() class UMyInterface : public UInterface { GENERATED_BODY() }; // Your interface class YOURPROJECT_API IMyInterface { GENERATED_BODY() public: UFUNCTION(BlueprintNativeEvent) void YourMethod(); }; To use it:
// Class that implements the interface UCLASS() class YOURPROJECT_API AMyCharacter : public AActor, public IMyInterface { GENERATED_BODY() public: virtual void YourMethod_Implementation() override; } // To use the interface from another function if (AnActor-\u0026gt;Implements\u0026lt;UMyInterface\u0026gt;()) { IOHActionEntity::Execute_YourMethod(AnActor); } More info here.
Delegate samples #// Declaration DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FCompletedQuestSignature, int32, index) UPROPERTY(BlueprintAssignable, BlueprintCallable) FCompletedQuestSignature CompletedQuest; // Broadcast CompletedQuest.Broadcast(parameter); // Subscribe UFUNCTION() // Required for dynamic void FunctionHandler(int32 index) CompletedQuest.AddDynamic(this, \u0026amp;Class::FunctionHandler); CompletedQuest.Add // For non dynamic version NOTE: Dynamic delegates can be serialized, their functions can be found by name, and they are slower than regular delegates. More info
Vector samples #Forward unit vector from a given rotation.
GetComponentRotation().Vector() Calculate vector of size MaxDistance starting at actor/component location on the same rotation as the actor/component.
FVector UClass::GetMaxGrabLocation() const { // GetComponentLocation or GetLocation depending if you're on an Actor or Component // same with Rotation return GetComponentLocation() + GetComponentRotation().Vector() * MaxDistance; } Linetracing samples #Complete custom sample:
// Single by channel FHitResult HitResult; if (GetWorld()-\u0026gt;LineTraceSingleByChannel(HitResult, Start, End, ECC_Visibility)) { // Handle hit! } // Linetrace for ECC_PhysicsBody or ECC_WorldDynamic FHitResult OutHit; if(GetWorld()-\u0026gt;LineTraceSingleByObjectType( OutHit, Start, End, FCollisionObjectQueryParams(ECC_TO_BITFIELD(ECollisionChannel::ECC_PhysicsBody) | ECC_TO_BITFIELD(ECollisionChannel::ECC_WorldDynamic)))) { // Handle hit! } Using Kismet (you can open its implementation to see more samples):
// LineTraceSingle or LineTraceMulti if (UKismetSystemLibrary::LineTraceSingle( WorldContextObject, StartLocation, EndLocation, UEngineTypes::ConvertToTraceType(ECC_Visibility), false, TArray\u0026lt;AActor*\u0026gt;(), EDrawDebugTrace::ForOneFrame, OutHitResult, true)) { // Handle hit(s)! } Sweep samples #Complete custom sample:
// Params with ignore self FCollisionQueryParams TraceParams(FName(\u0026quot;SphereTrace\u0026quot;), false, GetOwner()); FHitResult OutHit; // Sweep for ECC_PhysicsBody or ECC_WorldDynamic (SweepSingle or SweepMulti) if (GetWorld()-\u0026gt;SweepSingleByObjectType( OutHit, GetComponentLocation(), GetMaxGrabLocation(), FQuat::Identity, FCollisionObjectQueryParams(ECC_TO_BITFIELD(ECollisionChannel::ECC_PhysicsBody) | ECC_TO_BITFIELD(ECollisionChannel::ECC_WorldDynamic)), FCollisionShape::MakeSphere(GrabRadius), TraceParams)) { // Handle hit! } Using Kismet (you can open its implementation to see more samples):
// SphereTraceSingle or SphereTraceMulti if (UKismetSystemLibrary::SphereTraceMulti(this, CameraComponent-\u0026gt;GetComponentLocation(), GetActorLocation(), Radius, UEngineTypes::ConvertToTraceType(ECC_Visibility), false, TArray\u0026lt;AActor*\u0026gt;(), EDrawDebugTrace::ForOneFrame, OutHits, true) { // Handle hit(s)! } Anim notifiers C++ #UCLASS() class YOURPROJECT_API UAnimNotify_Name : public UAnimNotify { GENERATED_BODY() protected: virtual void Notify(USkeletalMeshComponent* MeshComp, UAnimSequenceBase* Animation) override; }; void UAnimNotify_Name::Notify(USkeletalMeshComponent* MeshComp, UAnimSequenceBase* Animation) { Super::Notify(MeshComp, Animation); // YOUR CODE GOES HERE } More info.
Anim instance C++ #UE Animation system: UCLASS() class YOURPROJECT_API UCharacterAnimInstance : public UAnimInstance { GENERATED_BODY() public: UCharacterAnimInstance(); UPROPERTY(EditDefaultsOnly) float MinWalkSpeed; } Pixel2d: UCLASS() class YOURPROJECT_API UCharacterAnimInstance : public UPixel2DAnimInstance { GENERATED_BODY() public: UCharacterAnimInstance(); UPROPERTY(EditDefaultsOnly) float MinWalkSpeed; } BoxCollider #// .h class CLASS_API AMyClass : public AActor { .... private: UPROPERTY(BlueprintReadOnly, meta = (AllowPrivateAccess = \u0026quot;true\u0026quot;)) UBoxComponent* BoxCollider; protected: virtual void BeginPlay() override; public: UFUNCTION() void BeginOverlapBoxCollider(UPrimitiveComponent* OverlappedComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const FHitResult \u0026amp; SweepResult); UFUNCTION() void EndOverlapBoxCollider(UPrimitiveComponent* OverlappedComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32 OtherBodyIndex); ... } // .cpp AMyClass::AMyClass() { BoxCollider= CreateDefaultSubobject\u0026lt;UBoxComponent\u0026gt;(TEXT(\u0026quot;BoxCollider\u0026quot;)); BoxCollider-\u0026gt;SetCollisionProfileName(TEXT(\u0026quot;Custom\u0026quot;)); // TODO: Set channel (if nedeed): BoxCollision-\u0026gt;SetCollisionObjectType(ECC_Visibility); // TODO: Set size: BoxCollider-\u0026gt;SetBoxExtent(FVector(10, 10, 10)); BoxCollider-\u0026gt;SetRelativeTransform(FTransform(FRotator::ZeroRotator, FVector(0, 0, 10), FVector(1, 1, 1))); // TODO: Customize collision config BoxCollider-\u0026gt;SetCollisionResponseToAllChannels(ECR_Ignore); BoxCollider-\u0026gt;SetCollisionEnabled(ECollisionEnabled::NoCollision); BoxCollider-\u0026gt;SetCollisionResponseToChannel(ECC_Pawn, ECR_Overlap); BoxCollider-\u0026gt;SetCollisionResponseToChannel(ECC_Visibility, ECR_Overlap); BoxCollider-\u0026gt;SetGenerateOverlapEvents(true); BoxCollider-\u0026gt;SetupAttachment(RootComponent); } void AMyClass::BeginPlay() { Super::BeginPlay(); BoxCollider-\u0026gt;OnComponentBeginOverlap.AddDynamic(this, \u0026amp;AMyClass::BeginOverlapBoxCollider); BoxCollider-\u0026gt;OnComponentEndOverlap.AddDynamic(this, \u0026amp;AMyClass::EndOverlapBoxCollider); } void AMyClass::BeginOverlapBoxCollider(UPrimitiveComponent* OverlappedComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const FHitResult\u0026amp; SweepResult) { // YOUR CODE GOES HERE } void AMyClass::EndOverlapBoxCollider(UPrimitiveComponent* OverlappedComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32 OtherBodyIndex) { // YOUR CODE GOES HERE } Billboards (editor icons) #// .h class CLASS_API AMyClass : public AActor { .... private: #if WITH_EDITORONLY_DATA // Editor Billboard UPROPERTY() UBillboardComponent* BillboardComponent; #endif .... // .cpp AMyClass::AMyClass() { USceneComponent* SceneComponent = CreateDefaultSubobject\u0026lt;USceneComponent\u0026gt;(TEXT(\u0026quot;SceneComp\u0026quot;)); RootComponent = SceneComponent; RootComponent-\u0026gt;Mobility = EComponentMobility::Static; // Or movable #if WITH_EDITORONLY_DATA BillboardComponent = CreateEditorOnlyDefaultSubobject\u0026lt;UBillboardComponent\u0026gt;(TEXT(\u0026quot;Sprite\u0026quot;)); if (BillboardComponent) { BillboardComponent-\u0026gt;SetWorldTransform( FTransform(FRotator::ZeroRotator, FVector::ZeroVector, FVector::OneVector * 4) ); BillboardComponent-\u0026gt;Sprite = ConstructorHelpers::FObjectFinderOptional\u0026lt;UTexture2D\u0026gt;(TEXT(\u0026quot;/PATH/TO-TEXTURE\u0026quot;)).Get(); BillboardComponent-\u0026gt;SetupAttachment(RootComponent); } #endif } `}),e.add({id:9,href:"/wiki/docs/linux/",title:"Linux",description:"Linux",content:""}),e.add({id:10,href:"/wiki/docs/",title:"Docs",description:"Docs Doks.",content:""}),search.addEventListener("input",t,!0);function t(){const s=5;var n=this.value,o=e.search(n,{limit:s,enrich:!0});const t=new Map;for(const e of o.flatMap(e=>e.result)){if(t.has(e.doc.href))continue;t.set(e.doc.href,e.doc)}if(suggestions.innerHTML="",suggestions.classList.remove("d-none"),t.size===0&&n){const e=document.createElement("div");e.innerHTML=`No results for "<strong>${n}</strong>"`,e.classList.add("suggestion__no-results"),suggestions.appendChild(e);return}for(const[r,a]of t){const n=document.createElement("div");suggestions.appendChild(n);const e=document.createElement("a");e.href=r,n.appendChild(e);const o=document.createElement("span");o.textContent=a.title,o.classList.add("suggestion__title"),e.appendChild(o);const i=document.createElement("span");if(i.textContent=a.description,i.classList.add("suggestion__description"),e.appendChild(i),suggestions.appendChild(n),suggestions.childElementCount==s)break}}})()